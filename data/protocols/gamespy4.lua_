-- Game Server Watcher
-- Copyright (C) 2023  Alexander Burobin

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Affero General Public License as
-- published by the Free Software Foundation, either version 3 of the
-- License, or (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Affero General Public License for more details.

-- You should have received a copy of the GNU Affero General Public License
-- along with this program.  If not, see <https://www.gnu.org/licenses/>.

-- https://wiki.unrealadmin.org/UT3_query_protocol

local switch = require("lib/switch")
local rand_integer = require("lib/rand_integer")
local DataReader = require("lib/DataReader")
local DataWriter = require("lib/DataWriter")
local CompoundResponse = require("lib/CompoundResponse")
local gamespy = require("lib/gamespy")

protocol = {
  id        = "gamespy4",
  name      = "GameSpy 4",
  feature   = "query",
  transport = "udp",
}

---@type integer | nil
local session_id
---@type integer | nil
local challenge
---@type CompoundResponse
local response

---@param session_id integer
local function send_challenge_packet(session_id)
  local w = DataWriter()
    :u8(0xfe):u8(0xfd)
    :u8(9)
    :i32be(session_id)
  gsw.send(w.buf)
end

---@param session_id integer
---@param challenge integer
local function send_stat_packet(session_id, challenge)
  local w = DataWriter()
    :u8(0xfe):u8(0xfd)
    :u8(0)
    :i32be(session_id)
    -- :i32be(challenge)
    :u32be(0xffffff01)
  gsw.send(w.buf)
end

function query()
  session_id = rand_integer(1, 0x7fffffff)

  --if challenge == nil then
  --  send_challenge_packet(session_id)
  --else
    response = CompoundResponse()
    response.details = {}
    response.pfields = {}
    response.plist = {}
    send_stat_packet(session_id, challenge)
  --end
end

--- @param r DataReader
local function parse_challenge_response(r)
  local str = r:zstring()
  local challenge = tonumber(str, 10)

  if math.type(challenge) ~= "integer" then
    error("invalid response: recieved challenge is not integer")
  end

  return challenge
end

--- @param r DataReader
local function parse_stat_response(r)
  local splitnum = r:zstring()

  if splitnum ~= "splitnum" then
    error("invalid response: invalid 'splitnum'")
  end

  local num_packets = r:u8()
  local final = (num_packets & 0x80) > 0
  local number = (num_packets & 0x7f) + 1

  local packet = {
    reqid = session_id,
    number = number,
    data = {}
  }

  if final then
    packet.total = number
  end

  while not r:is_end() do
    local info_type = r:u8()

    switch (info_type) {
      -- server info
      [0] = function()
        while not r:is_end() do
          local key = r:zstring()

          if #key == 0 then
            break
          end

          local val = r:zstring()
          response.details[key] = val
        end
      end,
      -- player info
      [1] = function()
        while not r:is_end() do
          local field = r:zstring()

          if #field == 0 then
            break
          end

          local count = r:u8()
        end
      end,
      [2] = function()
        r:zstring()
      end,
      default = function()
        error("invalid response: invalid info type")
      end,
    }
  end

  response:add_packet(packet)

  if response:got_all_packets() then
    local inf = gamespy.extract_server_info(response.details)
    gsw.sinfo(response.details, inf)
    gsw.plist(response.pfields, response.plist)
  end
end

---@param data string
function process(data)
  local r = DataReader(data)
  local kind = r:u8()
  local res_session_id = r:u32be()

  if res_session_id ~= session_id then
    error("invalid response: invalid session id " .. res_session_id)
  end

  switch (kind) {
    [9] = function()
      challenge = parse_challenge_response(r)
      query()
    end,
    [0] = function()
      parse_stat_response(r)
    end,
    default = function()
      error("invalid response: invalid response type " .. kind)
    end,
  }
end
